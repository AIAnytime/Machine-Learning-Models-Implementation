# -*- coding: utf-8 -*-
"""Will a person buy SUV?.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11hiXvEe2vs2sjs3uMxResJrqxw8HqgVi
"""

import pandas as pd

data = pd.read_csv("SUV_Purchase.csv")

data

data.info()

data.isna()

data.isna().sum()

"""## Using PyCaret"""

!pip install pycaret

import pycaret.classification as pc

pc.setup(
    data = data,
    target = 'Purchased',
    train_size = 0.7,
    normalize = True
)

pc.compare_models()

"""# Using Scikit Learn's Pipeline"""

import numpy as np
import matplotlib.pyplot as plt


from sklearn.preprocessing import StandardScaler, FunctionTransformer
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor

from sklearn.metrics import plot_confusion_matrix, classification_report

"""# Complete Pipeline"""

def raw_data_inputs(df, target, task):
  df = df.copy()
  #drop the unnecessary column
  df = df.drop("User ID", axis=1)
  #X and y
  X = df.drop(target, axis=1)
  y = df[target]

  #split the data
  X_train, X_test, y_train, y_test = train_test_split(X,y,
                                                      train_size=0.7,
                                                      shuffle=True,
                                                      random_state=1)
  #preprocessing pipeline
  binary_encoder = Pipeline(steps=[('function',
                                   FunctionTransformer(lambda column: column.replace({"Male":1, "Female":0})))])
  
  preprocessor = ColumnTransformer(transformers=[('binary',
                                                  binary_encoder,
                                                  ['Gender'])],
                                   remainder='passthrough')
  
  #model pipeline
  if target == 'Gender':
    model = DecisionTreeRegressor() if task == "regressor" else DecisionTreeClassifier()
  else:
    model = Pipeline(steps=[
                            ('preprocessor', preprocessor),
                            ('models', DecisionTreeRegressor() if task == "regressor" else DecisionTreeClassifier()),
                          
    ])

  #train model
  model.fit(X_train, y_train)

  #results
  result = model.score(X_test, y_test)

  return result

"""## It is Okay with Sklearn based models to have text labels in the target like "Male" and "Female".

- Features must be numeric.
- Target can be with texts in sklearn but not in Tensorflow based models.

So if target is "Gender" then we are fine as we have all numerical values in the feature columns.

But if "Gender" is a part of the feature column then we need to handle it.

## Results
"""

gender_accuracy=raw_data_inputs(data, target='Gender', task='classification')

print("Accuracy For Gender is: ",np.round(gender_accuracy*100), "%")

purchased_accuracy = raw_data_inputs(data, target='Purchased', task='classification')
print("Accuracy is: ", np.round(purchased_accuracy*100), "%")

age_r2 = raw_data_inputs(data, target = 'Age', task = 'regressor')
print(age_r2)

estimated_salary = raw_data_inputs(data, target = 'EstimatedSalary', task = 'regressor')
print(estimated_salary)

