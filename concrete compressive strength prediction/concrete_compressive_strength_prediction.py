# -*- coding: utf-8 -*-
"""Concrete Compressive Strength Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dT61uO4hcXNMkvyFTI387mlWbbXB3n5O
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
# %matplotlib inline

data = pd.read_excel("drive/My Drive/colab notebooks/Concrete_Data.xls")

data

data.columns

data.info()

data.isna().sum()

"""# Preprocessing

"""

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import GradientBoostingRegressor

from sklearn.metrics import r2_score

def preprocess_inputs(df):
  df = df.copy()

  #rename the columns name
  df.rename(columns={
      'Cement (component 1)(kg in a m^3 mixture)': 'cement',
      'Blast Furnace Slag (component 2)(kg in a m^3 mixture)': 'slag',
      'Fly Ash (component 3)(kg in a m^3 mixture)' : 'fly_ash',
      'Water  (component 4)(kg in a m^3 mixture)' : 'water',
      'Superplasticizer (component 5)(kg in a m^3 mixture)' : 'superplasticizer',
      'Coarse Aggregate  (component 6)(kg in a m^3 mixture)' : 'coarse_aggregate',
      'Fine Aggregate (component 7)(kg in a m^3 mixture)' : 'fine_aggregate',
      'Age (day)' : 'age',
      'Concrete compressive strength(MPa, megapascals) ' : 'compressive_strength'}, inplace = True)
  
  # X and y
  X = df.drop("compressive_strength", axis=1)
  y = df['compressive_strength']

  X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, shuffle = True, random_state=21)

  #scaling the data
  scaler = StandardScaler()
  X_train = pd.DataFrame(scaler.fit_transform(X_train), index = X_train.index, columns = X_train.columns)

  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = preprocess_inputs(data)

X_train

y_train

X_test

"""# Model"""

lin_reg = LinearRegression()
lin_estimator = lin_reg.fit(X_train, y_train)

lin_score = lin_reg.score(X_test, y_test)
print(lin_score*100)

"""#pycaret"""

!pip install pycaret

def pycaret_inputs(df):
  df = df.copy()

  #rename the columns name
  df.rename(columns={
      'Cement (component 1)(kg in a m^3 mixture)': 'cement',
      'Blast Furnace Slag (component 2)(kg in a m^3 mixture)': 'slag',
      'Fly Ash (component 3)(kg in a m^3 mixture)' : 'fly_ash',
      'Water  (component 4)(kg in a m^3 mixture)' : 'water',
      'Superplasticizer (component 5)(kg in a m^3 mixture)' : 'superplasticizer',
      'Coarse Aggregate  (component 6)(kg in a m^3 mixture)' : 'coarse_aggregate',
      'Fine Aggregate (component 7)(kg in a m^3 mixture)' : 'fine_aggregate',
      'Age (day)' : 'age',
      'Concrete compressive strength(MPa, megapascals) ' : 'compressive_strength'}, inplace = True)

  return df

X = pycaret_inputs(data)

X

X['age'].value_counts()

import pycaret.regression as pyr

pyr.setup(
    data = X,
    target = 'compressive_strength',
    train_size = 0.7,
    normalize = True

)

pyr.compare_models()

best_model = pyr.create_model('lightgbm')

pyr.evaluate_model(best_model)

X.iloc[[1,2,3,4]]

unseen_data = X.iloc[[1,2,3,4], :-1]
unseen_data

pyr.predict_model(best_model, data = unseen_data)

pyr.save_model(best_model, "concrete_strength")

