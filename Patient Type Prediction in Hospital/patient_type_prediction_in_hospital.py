# -*- coding: utf-8 -*-
"""Patient Type Prediction in Hospital.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1miLqPmxZ9HuIX0DyAFqf8dmIA2-mzQYw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("data-ori.csv")

data

"""# Task
- Our target is "SOURCE" to find out either "out" or "in
- Features are rest of the columns
- Need to handle SEX column that is a categorical one

# Basic EDA
"""

# More information about the data
data.info()

"""## Seems like no missing value"""

#check class distribution
data['SOURCE'].value_counts()

corr = data.corr()
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
);

"""## Looks like a preety much clear data so no need to do much preprocessing.


Jump to the data preparation and model.

We can use:
- PyCaret
- Sklearn's Pipeline

## Let's first do with PyCaret
"""

!pip3 install -U scikit-learn

!pip install pycaret

import pycaret.classification as pc

"""## Several functions we are going to use:
- setup()
- compare_models()
- create_model()
- tune_model()
- evaluate_model()
- predict_model()
"""

pc.setup(
    data = data,
    target = 'SOURCE',
    train_size = 0.8,
    normalize = True
)

pc.compare_models()

best_model = pc.create_model('rf')

pc.evaluate_model(best_model)

tuned_rf_model = pc.tune_model(best_model)

print(best_model)
print('-----------------------------------')
print(tuned_rf_model)

pc.evaluate_model(tuned_rf_model)

unseen_data = data.iloc[[1, 2, 3, 4]]
print(unseen_data)

unseen_data['SEX'].replace({'M':1, 'F':0},inplace=True)
print(unseen_data)

pc.predict_model(tuned_rf_model, data=unseen_data)

"""## Sklearn's Pipeline"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import classification_report, plot_confusion_matrix, matthews_corrcoef

def data_preparation(df):
  df = df.copy()
  #Handle categorical column
  df['SEX'].replace({'M':1, 'F':0},inplace=True)
  #X and y
  X = df.drop("SOURCE", axis=1)
  y = df['SOURCE']
  #split data
  X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.75, shuffle=True, random_state=1)
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = data_preparation(data)

X_train

y_train

print(len(X_train))
print(len(X_test))
print(len(y_train))
print(len(y_test))

"""## Build the pipeline"""

model = Pipeline(steps=[
                        ("scaler", StandardScaler()),
                        ("classifier", KNeighborsClassifier(n_neighbors=7))
])

knn_clf = model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_pred

print("Model score: ", np.round(knn_clf.score(X_test, y_test)*100), "%")

plot_confusion_matrix(knn_clf, X_test, y_test, labels=knn_clf.classes_)

clf_report = classification_report(y_test, y_pred, labels=knn_clf.classes_)
print(clf_report)

matthews_corrcoef(y_test, y_pred)