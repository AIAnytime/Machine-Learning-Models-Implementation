# -*- coding: utf-8 -*-
"""Sales Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GS4qkiAIt0jlt0akqPPjP8IUzd7iz5T9

## Data and Task

### Data Link: https://www.kaggle.com/flenderson/sales-analysis

- Historical Sales and Active Inventory.
- Records of sold and unsold products and their characteristics.

### Task: **To predict if a product has been sold in the last 6 months based on the historical features of the products**

## Imports
"""

!pip3 install -U scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, KFold
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline 


from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import f1_score, accuracy_score, plot_confusion_matrix, classification_report

"""## Data"""

data = pd.read_csv("SalesKaggle3.csv")

data

data.info()

#checking the count of missing value
data.isna().sum()

"""## Data Preparation/Preprocessing
- We are only going to work with "Historical Attributes" inside the column "File_Type" so first we need to drop active from that column.
"""

def data_preparation(df):
    df = df.copy()
    
    # Only use historical data
    df = df.query("File_Type == 'Historical'")
    
    # Drop unused columns
    df = df.drop(['Order', 'File_Type', 'SKU_number', 'SoldCount'], axis=1)
    
    # Shuffle data
    df = df.sample(frac=1.0, random_state=1)
    
    # Split df into X and y
    y = df['SoldFlag']
    X = df.drop('SoldFlag', axis=1)
    
    return X, y

X, y = data_preparation(data)

X

y

"""# Narration
- We need to Onehot encode the "Marketing Type" mainly looks like a Binary encoding. 
- SoldCount is a function for Soldflag that means we can't keep Soldcount as it already defines if the product has been sold so for a practical model, it is not feasible to give hint to the target.
- We will remove "Unique identifier" from the data like "Order", "SKU_number", etc.
- We don't need the file type anymore as we have all historical records.

## Pipeline
"""

def model_pipeline():
    binary_transformer = Pipeline(steps=[
        ('onehot', OneHotEncoder(sparse=False, drop='if_binary'))
    ])
    
    nominal_transformer = Pipeline(steps=[
        ('onehot', OneHotEncoder(sparse=False, handle_unknown='ignore'))
    ])
    
    preprocessor = ColumnTransformer(transformers=[
        ('binary', binary_transformer, ['MarketingType']),
        ('nominal', nominal_transformer, ['ReleaseNumber'])
    ], remainder='passthrough')
    
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', RandomForestClassifier(random_state=1))
    ])
    
    return model

"""# Model training and Evaluation

#### We using Kfold for validation
"""

accs = []
f1s = []

kf = KFold(n_splits=5)

for train_idx, test_idx in kf.split(X):
    X_train = X.iloc[train_idx, :]
    X_test = X.iloc[test_idx, :]
    y_train = y.iloc[train_idx]
    y_test = y.iloc[test_idx]
    
    model = model_pipeline()
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    
    accs.append(accuracy_score(y_test, y_pred))
    f1s.append(f1_score(y_test, y_pred, pos_label=1.0))

acc = np.mean(accs)
f1 = np.mean(f1s)

print("Accuracy: {:.2f}%".format(acc * 100))
print("F1-Score: {:.5f}".format(f1))