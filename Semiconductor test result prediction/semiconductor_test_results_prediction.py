# -*- coding: utf-8 -*-
"""Semiconductor Test Results Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aQci5bXUMjKFaUtp7fN4Bs1HxHKB2UOQ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

data = pd.read_csv("uci-secom.csv")
data

data.isna().sum()

data.dtypes

data.describe()

def data_preparation(df):
  df = df.copy()
  #drop time column. we would like a time-invariant model for future prediction.
  df = df.drop("Time", axis=1)
  #drop columns having more than 25% of missing values
  missing_val_col = df.columns[df.isna().mean() >= 0.25]
  df = df.drop(missing_val_col, axis=1)
  # Now fill the rest of the columns having missing value with their mean
  for column in df.columns:
    df[column] = df[column].fillna(df[column].mean())
  #filling target column with text label for more readable code(allows in Scikit Learn, not in TF)
  df['Pass/Fail'] = df['Pass/Fail'].replace({-1:"PASS", 1:"FAIL"})
  return df

X = data_preparation(data)

X

#check for missing value now
X.isna().sum().sum()

!pip3 install -U scikit-learn

!pip install pycaret

import pycaret.classification as pyc

pyc.setup(
    data=X,
    target="Pass/Fail",
    train_size=0.75,
    normalize= True
)

pyc.compare_models()

best_model = pyc.create_model('lightgbm')

pyc.evaluate_model(best_model)

tuned_lgbm_model = pyc.tune_model(best_model)

pyc.evaluate_model(tuned_lgbm_model)

unseen_data = X.iloc[[1, 2, 3], :-1]

print(unseen_data)

prediction = pyc.predict_model(best_model, data=unseen_data)
print(prediction)

result = prediction.to_csv("result.csv")

result_data = pd.read_csv("result.csv")
result_data

pyc.save_model(best_model, "model")

"""## Using Scikit-Learn Pipeline"""

from sklearn.model_selection import train_test_split

def preprocess_inputs(df):
  df = df.copy()
  #X and y
  X = df.drop('Pass/Fail', axis=1)
  y = df['Pass/Fail']
  X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, shuffle=True, random_state=1)
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = preprocess_inputs(X)

X_train

from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression

model = Pipeline(steps=[
                        ("scaler", StandardScaler()),
                        ("classifier", LogisticRegression())
])

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import classification_report, plot_confusion_matrix

plot_confusion_matrix(model, X_test, y_test, labels=model.classes_)

clr = classification_report(y_test, y_pred, labels=model.classes_)
print(clr)

