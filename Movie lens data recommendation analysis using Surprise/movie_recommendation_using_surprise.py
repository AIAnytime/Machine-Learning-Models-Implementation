# -*- coding: utf-8 -*-
"""Movie recommendation using Surprise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p0SbT1w1Z7F_PycSe_8axO7J9Rci55j5
"""

!pip install surprise

import pandas as pd

rating_data = pd.read_csv("drive/My Drive/colab notebooks/ratings.csv")

rating_data

rating_data = rating_data.drop("timestamp", axis=1)
rating_data

from surprise import Dataset, Reader, KNNBasic,accuracy
from surprise.model_selection import cross_validate

reader = Reader(rating_scale= (1,5))
data = Dataset.load_from_df(rating_data[['userId', 'movieId', 'rating']], reader = reader)

"""## User based similarity algorithm"""

item_based_cosine_similarity = {
    'name' : 'pearson',
    'user_based' : True # True for user-based and False for item-based
}

knn = KNNBasic(k = 15,
               min_k = 5,
               sim_options = item_based_cosine_similarity)

from surprise.model_selection import cross_validate

cv_results = cross_validate(knn,
                            data,
                            measures = ['rmse', 'mae'],
                            cv = 5,
                            verbose = False)

import numpy as np

np.mean(cv_results.get('test_rmse'))

"""## Find the best model"""

from surprise.model_selection.search import GridSearchCV

param_grids = {'k': [10,20],
               'sim_options': {'name': ['cosine', 'pearson'], 'user_based': [True, False]}}

grid_cv = GridSearchCV(KNNBasic,
                       param_grids,
                       measures = ['rmse'],
                       cv = 5,
                       refit = True)

grid_cv.fit(data)

print(grid_cv.best_score['rmse'])

results_data = pd.DataFrame.from_dict(grid_cv.cv_results)
results_data[['param_k', 'param_sim_options', 'mean_test_rmse', 'rank_test_rmse']]

grid_cv.predict(1,2)

